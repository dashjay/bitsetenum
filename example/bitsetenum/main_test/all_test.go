// Code generated by github.com/dashjay/bitsetenum. DO NOT EDIT.
package main_test

type Status uint64

const (
	Creating       Status = 1 << 0
	Normal         Status = 1 << 1
	Updating       Status = 1 << 2
	CanaryUpdating Status = 1 << 3
)

func (s *Status) SetStatusCreating(val bool) {
	if (*s&Creating == 0) != val {
		panic("set Creating assertion failed")
	}
	if val {
		*s |= Creating
	} else {
		*s &= ^Creating
	}
}
func (s *Status) GetStatusCreating() bool {
	return (*s)&Creating != 0
}
func (s *Status) SetStatusNormal(val bool) {
	if (*s&Normal == 0) != val {
		panic("set Normal assertion failed")
	}
	if val {
		*s |= Normal
	} else {
		*s &= ^Normal
	}
}
func (s *Status) GetStatusNormal() bool {
	return (*s)&Normal != 0
}
func (s *Status) SetStatusUpdating(val bool) {
	if (*s&Updating == 0) != val {
		panic("set Updating assertion failed")
	}
	if val {
		*s |= Updating
	} else {
		*s &= ^Updating
	}
}
func (s *Status) GetStatusUpdating() bool {
	return (*s)&Updating != 0
}
func (s *Status) SetStatusCanaryUpdating(val bool) {
	if (*s&CanaryUpdating == 0) != val {
		panic("set CanaryUpdating assertion failed")
	}
	if val {
		*s |= CanaryUpdating
	} else {
		*s &= ^CanaryUpdating
	}
}
func (s *Status) GetStatusCanaryUpdating() bool {
	return (*s)&CanaryUpdating != 0
}

type StatusWithUnset uint64

const (
	Creating1       StatusWithUnset = 1 << 0
	Normal1         StatusWithUnset = 1 << 1
	Updating1       StatusWithUnset = 1 << 2
	CanaryUpdating1 StatusWithUnset = 1 << 3
)

func (s *StatusWithUnset) SetStatusWithUnsetCreating1() {
	if (*s)&Creating1 != 0 {
		panic("set Creating1 assertion failed")
	}
	(*s) |= Creating1
}
func (s *StatusWithUnset) UnSetStatusWithUnsetCreating1() {
	if (*s)&Creating1 == 0 {
		panic("set Creating1 assertion failed")
	}
	(*s) &= ^Creating1
}
func (s *StatusWithUnset) GetStatusWithUnsetCreating1() bool {
	return (*s)&Creating1 != 0
}
func (s *StatusWithUnset) SetStatusWithUnsetNormal1() {
	if (*s)&Normal1 != 0 {
		panic("set Normal1 assertion failed")
	}
	(*s) |= Normal1
}
func (s *StatusWithUnset) UnSetStatusWithUnsetNormal1() {
	if (*s)&Normal1 == 0 {
		panic("set Normal1 assertion failed")
	}
	(*s) &= ^Normal1
}
func (s *StatusWithUnset) GetStatusWithUnsetNormal1() bool {
	return (*s)&Normal1 != 0
}
func (s *StatusWithUnset) SetStatusWithUnsetUpdating1() {
	if (*s)&Updating1 != 0 {
		panic("set Updating1 assertion failed")
	}
	(*s) |= Updating1
}
func (s *StatusWithUnset) UnSetStatusWithUnsetUpdating1() {
	if (*s)&Updating1 == 0 {
		panic("set Updating1 assertion failed")
	}
	(*s) &= ^Updating1
}
func (s *StatusWithUnset) GetStatusWithUnsetUpdating1() bool {
	return (*s)&Updating1 != 0
}
func (s *StatusWithUnset) SetStatusWithUnsetCanaryUpdating1() {
	if (*s)&CanaryUpdating1 != 0 {
		panic("set CanaryUpdating1 assertion failed")
	}
	(*s) |= CanaryUpdating1
}
func (s *StatusWithUnset) UnSetStatusWithUnsetCanaryUpdating1() {
	if (*s)&CanaryUpdating1 == 0 {
		panic("set CanaryUpdating1 assertion failed")
	}
	(*s) &= ^CanaryUpdating1
}
func (s *StatusWithUnset) GetStatusWithUnsetCanaryUpdating1() bool {
	return (*s)&CanaryUpdating1 != 0
}
